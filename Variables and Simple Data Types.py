{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOsGstGdLwNlS+WXUIA2Mp6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Learning Goals**\n","\n","\n","1. To use descriptive variable names and how to resolve name errors and syntax errors when they arise.\n","2. What strings are and how to display strings using lowercase, uppercase, and title case?\n","3. Use of whitespace to organize output neatly, and to strip unneeded whitespace from different parts of a string.\n","4. Use of integers and floats, and some of the ways we can work with numerical data.\n","5. Writing explanatory comments to make your code easier for you and others to read.\n","6. Finally, we will read about the philosophy of keeping your code as simple as possible, whenever possible.\n","\n"],"metadata":{"id":"NWTuWBITvHQ6"}},{"cell_type":"markdown","source":["# Variables"],"metadata":{"id":"F1IDPqxvxGMC"}},{"cell_type":"markdown","source":["**Naming and Using Variables**\n","\n","1. Be sure\n","to keep the following variable rules in mind:\n","2.\t Variable names can contain only letters, numbers, and underscores.\n","They can start with a letter or an underscore, but not with a number.\n","For instance, you can call a variable message_1 but not 1_message.\n","3.\t Spaces are not allowed in variable names, but underscores can be used\n","to separate words in variable names. For example, greeting_message\n","works, but greeting message will cause errors.\n","4.\t Avoid using Python keywords and function names as variable names;\n","that is, do not use words that Python has reserved for a particular programmatic purpose, such as the word print. (See “Python Keywords\n","and Built-in Functions” on page 471.)\n","5.\t Variable names should be short but descriptive. For example, name is\n","better than n, student_name is better than s_n, and name_length is better\n","than length_of_persons_name.\n","6.\t Be careful when using the lowercase letter l and the uppercase letter O\n","because they could be confused with the numbers 1 and 0.\n","\n"],"metadata":{"id":"JMUhcmGnwoo3"}},{"cell_type":"markdown","source":["**Variables Are Labels**\n","\n","1. Variables are often described as boxes you can store values in. This idea can\n","be helpful the first few times you use a variable, but it isn’t an accurate way\n","to describe how variables are represented internally in Python.\n","2. It’s much\n","better to think of variables as labels that you can assign to values. You can\n","also say that a variable references a certain value."],"metadata":{"id":"QBqKo1Ptxep6"}},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j4f9LmOacR4W","executionInfo":{"status":"ok","timestamp":1744809946026,"user_tz":-330,"elapsed":73,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"87e57b69-e690-4fa8-88fe-c12c8d71b6dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hello world\n"]}],"source":["variable  = 'Hello world'\n","print(variable)"]},{"cell_type":"markdown","source":["# Strings\n","1. A string is a series of characters. Anything inside quotes is considered\n","a string in Python, and you can use single or double quotes around your\n","strings."],"metadata":{"id":"_9YKE-8YpSmy"}},{"cell_type":"code","source":["message = 'Hello World'\n","print(message)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ARc5SHtxcpVa","executionInfo":{"status":"ok","timestamp":1744805819872,"user_tz":-330,"elapsed":5,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"b408cb83-21eb-494f-8dd3-c0f1174ee0d8"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello World\n"]}]},{"cell_type":"code","source":["message = 'hii baby'\n","print(message)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w2SMkBs-dSmf","executionInfo":{"status":"ok","timestamp":1744805822623,"user_tz":-330,"elapsed":36,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"bcbbeae4-ed1f-4325-c541-ef18ccdee50a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["hii baby\n"]}]},{"cell_type":"markdown","source":["**Changing Case in a String with Methods**"],"metadata":{"id":"0TtfLuv-jJ5y"}},{"cell_type":"code","source":["name = 'akash'\n","print(name.title())\n","print(name.upper())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KDRkgSUHiBDk","executionInfo":{"status":"ok","timestamp":1744805929876,"user_tz":-330,"elapsed":7,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"5449abfd-3109-4b79-b14f-9be9df000a8a"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Akash\n","AKASH\n"]}]},{"cell_type":"code","source":["name = 'AKASH'\n","print(name.title())\n","print(name.lower())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AT6_64NkiRWZ","executionInfo":{"status":"ok","timestamp":1744805940511,"user_tz":-330,"elapsed":9,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"6b8447d3-16c3-4f05-c183-6010700f2464"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Akash\n","akash\n"]}]},{"cell_type":"markdown","source":["**Using Variables in Strings**"],"metadata":{"id":"sKI44u-wjOkm"}},{"cell_type":"code","source":["first_name = 'akash'\n","last_name = 'kumar'\n","full_name = f'{first_name} {last_name}'\n","print(full_name.title())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fM4WSBqNjTHQ","executionInfo":{"status":"ok","timestamp":1744806452942,"user_tz":-330,"elapsed":12,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"2d8729b4-a256-48b5-fa28-e90f02afff3f"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Akash Kumar\n"]}]},{"cell_type":"code","source":["print(f'Hello, {full_name.title()}!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XnmhCyEKkYTk","executionInfo":{"status":"ok","timestamp":1744806448729,"user_tz":-330,"elapsed":8,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"0b56bb7a-484a-481d-da1e-afedfb467108"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Akash Kumar!\n"]}]},{"cell_type":"code","source":["message = f'Hello, {full_name.title()}!'\n","print(message)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sa6wV8wlkah9","executionInfo":{"status":"ok","timestamp":1744806484588,"user_tz":-330,"elapsed":7,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"7538cf65-6bfb-4f13-dedd-52f6c2abab79"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Akash Kumar!\n"]}]},{"cell_type":"markdown","source":["**Adding Whitespace to Strings with Tabs or Newlines**"],"metadata":{"id":"8JN9n0FPkxJd"}},{"cell_type":"code","source":["print('hi mr.bombastic')\n","print('\\t\\nhi mr.bombastic')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E1gU_KzCkzB8","executionInfo":{"status":"ok","timestamp":1744806656687,"user_tz":-330,"elapsed":10,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"12bd03d8-b720-4e5c-ebce-48330d798b1f"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["hi mr.bombastic\n","\t\n","hi mr.bombastic\n"]}]},{"cell_type":"code","source":["print('hi \\nmr.\\nbombastic')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sjW2tcj5lM8o","executionInfo":{"status":"ok","timestamp":1744806685035,"user_tz":-330,"elapsed":9,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"9f9d8f30-7be5-4865-e9b4-bf76b38e0414"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["hi \n","mr.\n","bombastic\n"]}]},{"cell_type":"markdown","source":["**Stripping Whitespace**"],"metadata":{"id":"j-93SgmzmoMz"}},{"cell_type":"code","source":["favorite_language  = ' python '\n","favorite_language.rstrip()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"5cblmElGmq4f","executionInfo":{"status":"ok","timestamp":1744807228693,"user_tz":-330,"elapsed":57,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"da303223-1d49-48d3-f173-01bef5df8a27"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["' python'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","source":[],"metadata":{"id":"MRQggpjyocDE"}},{"cell_type":"code","source":["favorite_language.lstrip()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"JgeXn0pPnSdY","executionInfo":{"status":"ok","timestamp":1744807222512,"user_tz":-330,"elapsed":54,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"44da78f9-341a-46c0-b905-62e6d9fa2c9b"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'python '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["favorite_language.strip()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"F_9Q73DSnTLf","executionInfo":{"status":"ok","timestamp":1744807225009,"user_tz":-330,"elapsed":32,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"b41cc2f5-199d-4135-e0b6-d2038c5cb9fa"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'python'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["**Exercise 1.**\n","*Famous Quote: Find a quote from a famous person you admire. Print the\n","quote and the name of its author. Your output should look something like the\n","following, including the quotation marks:\n","Albert Einstein once said, “A person who never made a\n","mistake never tried anything new.”*"],"metadata":{"id":"HTOGS-NAoc6S"}},{"cell_type":"code","source":["quote = \"A person who never made a mistake never tried anything new.\"\n","author = \"Albert Einstein\"\n","print(f\"{author} once said, \\n{quote}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TmEKOEnUof0c","executionInfo":{"status":"ok","timestamp":1744807638008,"user_tz":-330,"elapsed":10,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"8c04e144-a6ac-4bcf-8e06-f907e4ef0dd2"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Albert Einstein once said, \n","A person who never made a mistake never tried anything new.\n"]}]},{"cell_type":"markdown","source":["# Numbers"],"metadata":{"id":"QGsjwiD7pVoP"}},{"cell_type":"markdown","source":["**Underscores in Numbers.**\n","\n","*   when you’re writing long numbers, you can group digits using underscores\n","to make large numbers more readable."],"metadata":{"id":"8sHS9zj5qHaD"}},{"cell_type":"code","source":["big_number = 13_00_010\n","print(big_number)\n","big_number  = 1_122563\n","print(big_number)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zx9q0juMqK2Q","executionInfo":{"status":"ok","timestamp":1744808186192,"user_tz":-330,"elapsed":11,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"7c6aca5f-8a0f-46df-e527-36175646594e"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["1300010\n","1122563\n"]}]},{"cell_type":"markdown","source":["**Multiple Assignment**\n","\n","*  You can assign values to more than one variable using just a single line.\n","This can help shorten your programs and make them easier to read; you’ll\n","use this technique most often when initializing a set of numbers.\n","\n"],"metadata":{"id":"Wk4Ss8c_rTjM"}},{"cell_type":"code","source":["x, y, z = 1,2,3\n","y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZaMJqfnurcmk","executionInfo":{"status":"ok","timestamp":1744808403259,"user_tz":-330,"elapsed":12,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"1982177f-58a7-4d62-cb33-19cacdab4ecc"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":57}]},{"cell_type":"markdown","source":["**Constants**\n","\n","1.  \n","A constant is like a variable whose value stays the same throughout the life\n","of a program. Python doesn’t have built-in constant types, but Python programmers use all capital letters to indicate a variable should be treated as a\n","constant and never be changed:\n","2. When you want to treat a variable as a constant in your code, make the\n","name of the variable all capital letters.\n","\n","\n"],"metadata":{"id":"emhedaedr22F"}},{"cell_type":"code","source":["MAX_CONNECTION = 4355\n","MAX_CONNECTION"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"44D9kvYDr8SJ","executionInfo":{"status":"ok","timestamp":1744808460401,"user_tz":-330,"elapsed":13,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"8449782d-a143-4095-ad8e-83dbcc69edef"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4355"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["MAX_CONNECTION = 90\n","MAX_CONNECTION"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cqXgaR14sJsk","executionInfo":{"status":"ok","timestamp":1744808516477,"user_tz":-330,"elapsed":8,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"93e8b566-1767-407c-d14b-4763cbe02195"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["90"]},"metadata":{},"execution_count":62}]},{"cell_type":"markdown","source":["# Comments\n","1.   A comment allows you to write notes in English\n","within your programs.\n","2.In Python, the hash mark (#) indicates a comment. Anything following a\n","hash mark in your code is ignored by the Python interpreter.\n","\n"],"metadata":{"id":"y6OUwI-vtHoR"}},{"cell_type":"code","source":["# hellooo everyone\n","print(\"heyyy akash, how you doing?\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KN4xwRS4tPFq","executionInfo":{"status":"ok","timestamp":1744808833914,"user_tz":-330,"elapsed":44,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"46541d51-3f6a-466b-8bae-6c9a2a9c31d7"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["heyyy akash, how you doing?\n"]}]},{"cell_type":"markdown","source":["# The Zen of Python\n","\n","1.   Experienced Python programmers will encourage you to avoid complexity\n","and aim for simplicity whenever possible.\n","2. The Python community’s philosophy is contained in “The Zen of Python” by Tim Peters\n","\n","\n"],"metadata":{"id":"WtmoR_DpuOfl"}},{"cell_type":"code","source":["import this"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JcYlmSRduJ9X","executionInfo":{"status":"ok","timestamp":1744809012938,"user_tz":-330,"elapsed":19,"user":{"displayName":"Akash Kumar","userId":"18008892899058543266"}},"outputId":"715efb97-14bd-4432-db61-69c87ebc80e6"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["The Zen of Python, by Tim Peters\n","\n","Beautiful is better than ugly.\n","Explicit is better than implicit.\n","Simple is better than complex.\n","Complex is better than complicated.\n","Flat is better than nested.\n","Sparse is better than dense.\n","Readability counts.\n","Special cases aren't special enough to break the rules.\n","Although practicality beats purity.\n","Errors should never pass silently.\n","Unless explicitly silenced.\n","In the face of ambiguity, refuse the temptation to guess.\n","There should be one-- and preferably only one --obvious way to do it.\n","Although that way may not be obvious at first unless you're Dutch.\n","Now is better than never.\n","Although never is often better than *right* now.\n","If the implementation is hard to explain, it's a bad idea.\n","If the implementation is easy to explain, it may be a good idea.\n","Namespaces are one honking great idea -- let's do more of those!\n"]}]}]}
